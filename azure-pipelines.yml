# azure-pipelines.yml
trigger:
  - main # Trigger the pipeline on changes to the 'main' branch

pool:
  name: 'myazurevm' # Use a Microsoft-hosted agent (or your self-hosted agent)

variables:
  # Name of your Azure DevOps Service Connection
  azureServiceConnection: 'devopstoazure'
  
  # Terraform backend storage details (must exist in Azure before pipeline runs)
  backendResourceGroupName: 'tfstate-rg'
  backendStorageAccountName: 'tfstatestoragefree' # Must match the one in main.tf
  backendContainerName: 'tfstate'
  backendKey: 'terraform.tfstate'

  # Variables for your Azure Resource Group
  # These can be overridden by variable groups or at runtime
  resourceGroupName: 'my-terraform-rg-22' # Unique name for each run
  resourceGroupLocation: 'centralindia'
  environmentTag: 'dev'

stages:
- stage: TerraformPlan
  displayName: 'Terraform Plan'
  jobs:
  - job: Plan
    displayName: 'Run Terraform Plan'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest' # Or a specific version like '1.5.7'

    - task: AzureCLI@2
      displayName: 'Set up Azure Backend (if not already done)'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --name $(backendResourceGroupName) --location "$(resourceGroupLocation)" --output none --only-show-errors || true
          az storage account create --name $(backendStorageAccountName) --resource-group $(backendResourceGroupName) --sku Standard_LRS --encryption-services blob --output none --only-show-errors || true
          az storage container create --name $(backendContainerName) --account-name $(backendStorageAccountName) --output none --only-show-errors || true
      # This step attempts to create the backend resources if they don't exist.
      # '|| true' allows the step to succeed even if the resource already exists (e.g., 'already exists' error).

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)' # Path to your Terraform files
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(backendResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendStorageAccountName)'
        backendAzureRmContainerName: '$(backendContainerName)'
        backendAzureRmKey: '$(backendKey)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/tfplan.out -var="resource_group_name=$(resourceGroupName)" -var="location=$(resourceGroupLocation)" -var="environment=$(environmentTag)"'

    - publish: $(System.DefaultWorkingDirectory)/tfplan.out
      artifact: tfplan

- stage: TerraformApply
  displayName: 'Terraform Apply'
  dependsOn: TerraformPlan # This stage runs only after the Plan stage
  condition: succeeded() # Only run if the previous stage succeeded
  jobs:
  - job: Apply
    displayName: 'Apply Terraform Changes'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - download: current
      artifact: tfplan
      # Downloads the tfplan.out file from the previous stage

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init (for apply stage)'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(backendResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendStorageAccountName)'
        backendAzureRmContainerName: '$(backendContainerName)'
        backendAzureRmKey: '$(backendKey)'
   
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan (for apply stage)'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/tfplan.out -var="resource_group_name=$(resourceGroupName)" -var="location=$(resourceGroupLocation)" -var="environment=$(environmentTag)"'

    #- publish: $(System.DefaultWorkingDirectory)/tfplan.out
      #artifact: tfplan

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        commandOptions: '$(System.DefaultWorkingDirectory)/tfplan.out' # Apply the planned changes